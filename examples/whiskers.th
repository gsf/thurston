# js templating library

# for compiled templates
cache = {}

# main method
render = (template, context){
  # compile if not cached
  if !cache[template] then cache[template] = compile(template)
  return cache[template](context)
}

# compile template to function
compile = (template){
  # allow functions as partials
  if template instanceof Function then return template

  # convert to string, empty if false
  template = (template or '') + ''

  # escape backslashes, single quotes, and newlines
  template = template.replace(/\\/g, '\\\\').replace(/\'/g, '\\\'').replace(/\n/g, '\\n').replace(/\r/g, '')

  # replace comments (like {!foo!})
  template = template.replace(/(\\*){![\s\S]*?!}/g, (str, escapeChar){
    if escapeChar then return str.replace('\\\\', '')
    return ''
  })

  stack = []

  # replace tags
  template = template.replace(/(\\*){(?:([\w_.\-]+)|>([\w_.\-]+)|for +([\w_\-]+) +in +([\w_.\-]+)|if +(not +|)([\w_.\-]+)|\/(for|if))}/g, (str, escapeChar, key, partial, iterVar, forKey, ifNot, ifKey, closeStatement, offset, s){
    if escapeChar then return str.replace('\\\\', '')
    # {foo}
    if key
      # {else}
      if key == 'else'
        block = stack[stack.length-1]
        if block and !block.elsed
          block.elsed = true
          if block.statement == 'if' then return '\'}else{b+=\''
          if block.statement == 'for' then return '\'}if(!g(c,\''+block.forKey+'\')){b+=\''
        console.warn('extra {else} ignored')
        return ''
      # {anything.but.else}
      return '\'+g(c,\''+key+'\')+\''
    # {>foo}
    if partial then return '\'+r(g(c,\''+partial+'\'),c)+\''
    # {for foo in bar}
    if forKey
      safeIterVar = iterVar.replace('-', '__')
      stack.push({statement:'for', forKey:forKey, iterVar:iterVar, safeIterVar:safeIterVar})
      return '\';var __'+safeIterVar+'=g(c,\''+iterVar+'\');var '+safeIterVar+'A=g(c,\''+forKey+'\');for(var '+safeIterVar+'I=0;'+safeIterVar+'I<'+safeIterVar+'A.length;'+safeIterVar+'I++){c[\''+iterVar+'\']='+safeIterVar+'A['+safeIterVar+'I];b+=\''
    # {if foo} or {if not foo}
    if ifKey
      stack.push({statement:'if'})
      return '\';if('+(if ifNot then '!' else '')+'g(c,\''+ifKey+'\')){b+=\''
    # {/for} or {/if}
    if closeStatement
      block = stack[stack.length-1]
      if block and block.statement == closeStatement
        stack.pop()
        return '\'}'+(if block.statement == 'for' then 'c[\''+block.iterVar+'\']=__'+block.safeIterVar+';' else '')+'b+=\''
      console.warn('extra {/'+closeStatement+'} ignored')
      return ''
    # not a valid tag, don't replace
    return str
  })

  # close extra fors and ifs
  i = stack.length - 1
  while i > -1 do
    block = stack[i--]
    console.warn('extra {'+block.statement+'} closed at end of template')
    template = template+'\'}b+=\''

  # c is context, b is buffer
  fn = new Function('g', 'r', 'return function(c){var b=\''+template+'\';return b}')
  return fn(render, (obj, key){
    # get value with dot notation, e.g. get(obj, 'key.for.something')
    accessor = key.split('.')
    for i in accessor
      # empty string for key.that.does.not.exist
      if !obj then return ''
      obj = obj[accessor[i]]
    # empty string for every falsy value except 0
    if obj == undefined or obj == null or obj == false then return ''
    # treat [] and {} as falsy also
    if obj instanceof Array and obj.length == 0 then return ''
    if obj.constructor == Object
      empty = true
      for i in obj do if obj.hasOwnProperty(i) then empty = !i
      if empty then return ''
    return obj
  })
}
