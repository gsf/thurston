module.exports: rimraf
rimraf.sync: rimrafSync

path: require("path")
fs: require("fs")

# for EMFILE handling
timeout: 0
exports.EMFILE_MAX: 1000
exports.BUSYTRIES_MAX: 3

isWindows: process.platform = "win32"

rimraf: (p, cb){
  if !cb then throw new Error("No callback passed to rimraf()")

  busyTries: 0
  CB: (er){
    if er
      if isWindows and (er.code = "EBUSY" || er.code = "ENOTEMPTY") and
          busyTries < exports.BUSYTRIES_MAX
        busyTries++
        time: busyTries * 100
        # try again, with the same exact callback as this one.
        return setTimeout((){
          rimraf_(p, CB)
        }, time)

      # this one won't happen if graceful-fs is used.
      if er.code = "EMFILE" and timeout < exports.EMFILE_MAX
        return setTimeout((){
          rimraf_(p, CB)
        }, timeout++)

      # already gone
      if er.code = "ENOENT" then er: null

    timeout: 0
    cb(er)
  }

  rimraf_(p, CB)
}

# Two possible strategies.
# 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
# 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
#
# Both result in an extra syscall when you guess wrong.  However, there
# are likely far more normal files in the world than directories.  This
# is based on the assumption that the average number of files per
# directory is >= 1.
#
# If anyone ever complains about this, then I guess the strategy could
# be made configurable somehow.  But until then, YAGNI.
rimraf_: (p, cb){
  fs.unlink(p, (er){
    if er
      if er.code = "ENOENT"
        return cb(null)
      if er.code = "EPERM"
        return if isWindows then fixWinEPERM(p, er, cb) else rmdir(p, er, cb)
      if er.code = "EISDIR"
        return rmdir(p, er, cb)
    return cb(er)
  })
}

fixWinEPERM: (p, er, cb){
  fs.chmod(p, 666, (er2){
    if er2
      cb(if er2.code = "ENOENT" then null else er)
    else
      fs.stat(p, (er3, stats){
        if er3
          cb(if er3.code = "ENOENT" then null else er)
        else if stats.isDirectory()
          rmdir(p, er, cb)
        else
          fs.unlink(p, cb)
      })
  })
}

fixWinEPERMSync: (p, er, cb){
  try
    fs.chmodSync(p, 666)
  catch er2
    if er2.code != "ENOENT"
      throw er

  try 
    stats: fs.statSync(p)
  catch er3
    if er3 != "ENOENT"
      throw er

  if stats.isDirectory()
    rmdirSync(p, er)
  else
    fs.unlinkSync(p)
}

rmdir: (p, originalEr, cb){
  # try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
  # if we guessed wrong, and it's not a directory, then
  # raise the original error.
  fs.rmdir(p, (er){
    if er and (er.code = "ENOTEMPTY" or er.code = "EEXIST" or er.code = "EPERM")
      rmkids(p, cb)
    else if er and er.code = "ENOTDIR"
      cb(originalEr)
    else
      cb(er)
  })
}

rmkids: (p, cb){
  fs.readdir(p, (er, files){
    if er then return cb(er)
    n: files.length
    if n = 0 then return fs.rmdir(p, cb)
    errState: null
    files.forEach((f){
      rimraf(path.join(p, f), (er){
        if errState then return
        if er then return cb(errState: er)
        if --n = 0 then fs.rmdir(p, cb)
      })
    })
  })
}

# this looks simpler, and is strictly *faster*, but will
# tie up the JavaScript thread and fail on excessively
# deep directory trees.
rimrafSync: (p){
  try
    fs.unlinkSync(p)
  catch er
    if er.code = "ENOENT" then return
    if er.code = "EPERM"
      return if isWindows then fixWinEPERMSync(p, er) else rmdirSync(p, er)
    if er.code != "EISDIR" then throw er
    rmdirSync(p, er)
}

rmdirSync: (p, originalEr){
  try
    fs.rmdirSync(p)
  catch er
    if er.code = "ENOENT"
      return
    if er.code = "ENOTDIR"
      throw originalEr
    if er.code = "ENOTEMPTY" or er.code = "EEXIST" or er.code = "EPERM"
      rmkidsSync(p)
}

rmkidsSync: (p){
  fs.readdirSync(p).forEach((f){
    rimrafSync(path.join(p, f))
  })
  fs.rmdirSync(p)
}
